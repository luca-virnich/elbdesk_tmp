name: Build Windows MSIX

on:
  workflow_call:
    inputs:
      app_path:               { required: true, type: string }
      flutter_version:        { required: true, type: string }
      app_version_full:       { required: true, type: string }
      app_version_major:      { required: true, type: string }
      app_version_minor:      { required: true, type: string }
      app_version_patch:      { required: true, type: string }
      app_version_build:      { required: true, type: string }
      app_display_name:       { required: true, type: string }
      publisher_display_name: { required: true, type: string }
      app_name:               { required: true, type: string }
      app_identifier:         { required: true, type: string }
      msix_app_version_key:   { required: true, type: string }
      version_log_file:       { required: true, type: string }
      branch:                 { required: true, type: string }
      run_mode:               { required: true, type: string }

jobs:
  build-msix:
    runs-on: windows-latest
    
    steps:
      ############################################################
      # 1. Checkout source
      ############################################################
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}


      ############################################################
      # 2. Set up Flutter
      ############################################################
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ inputs.flutter_version }}
          channel: stable


      ############################################################
      # 3. Enable Windows desktop
      ############################################################
      - name: Enable Windows desktop
        shell: pwsh
        run: flutter config --enable-windows-desktop
 

      ############################################################
      # 4. Decode signing certificate (PFX)
      ############################################################
      - name: Decode signing certificate (PFX)
        shell: pwsh
        working-directory: ${{ inputs.app_path }}
        run: |
          New-Item -ItemType Directory -Force -Path "windows/certificates" | Out-Null
          $pfxPath = "windows/certificates/codesign.pfx"
          [IO.File]::WriteAllBytes($pfxPath, [Convert]::FromBase64String('${{ secrets.PFX_BASE64 }}'))
          

      ############################################################
      # 5. Get token from Github App for private repo access
      ############################################################
      - name: Get token from Github App for private repo access
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
            app-id: ${{ secrets.APP_ID }}
            private-key: ${{ secrets.APP_PRIVATE_KEY }}
            owner: App-Ahoi     


      ############################################################
      # 6. Set up Git credentials for private repo access
      ############################################################
      - name: Set up Git credentials 
        run: |
          git config --global url."https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/".insteadOf "https://github.com/"
      
      
      ############################################################
      # 7. Verify PFX password (fail fast + print cert info)
      ############################################################
      - name: Verify PFX password
        shell: pwsh
        working-directory: ${{ inputs.app_path }}
        env:
          PFX_PASS: ${{ secrets.PFX_PASSWORD }}
        run: |
          $pfxPath = "windows/certificates/codesign.pfx"

          # Mask the password defensively (secrets are masked by default, this adds belt & suspenders)
          echo "::add-mask::$env:PFX_PASS"

          # Convert to SecureString and try to open the PFX
          $sec = ConvertTo-SecureString -String $env:PFX_PASS -AsPlainText -Force
          try {
            $pfx  = Get-PfxData -FilePath $pfxPath -Password $sec
            $cert = $pfx.EndEntityCertificates[0]

            Write-Host "PFX password OK."
            Write-Host "Subject   : $($cert.Subject)"
            Write-Host "Thumbprint: $($cert.Thumbprint)"
            Write-Host "Valid     : $($cert.NotBefore) .. $($cert.NotAfter)"
          }
          catch {
            Write-Error "PFX password check failed: $($_.Exception.Message)"
            exit 1
          }

          
      ############################################################
      # 7. Build MSIX
      ############################################################
      - name: Build MSIX
        shell: pwsh
        working-directory: ${{ inputs.app_path }}
        run: |
          flutter pub get
          dart run msix:create `
          --install-certificate false `
          --certificate-path "windows/certificates/codesign.pfx" `
          --certificate-password "${{ secrets.PFX_PASSWORD }}" `
          --output-path "build/windows/msix" `
          --windows-build-args "--dart-define=APP_VERSION=${{ inputs.app_version_full }} --dart-define=RUN_MODE=${{ inputs.run_mode }}" `
          --logo-path "windows/runner/resources/app_icon_${{ inputs.run_mode }}_512.png" `
          --output-name "${{ inputs.run_mode }}-${{ inputs.app_name }}-${{ inputs.app_version_full }}" `
          --display-name "${{ inputs.app_display_name }}" `
          --publisher-display-name "${{ inputs.publisher_display_name }}" `
          --identity-name "${{ inputs.app_identifier }}" `
          --version "${{ inputs.app_version_major }}.${{ inputs.app_version_minor }}.${{ inputs.app_version_patch }}.${{ inputs.app_version_build }}"


      ############################################################
      # 8. Upload MSIX artifacts
      ############################################################
      - name: Upload MSIX artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.run_mode }}-${{ inputs.app_name }}-${{ inputs.app_version_full }}
          path: |
            ${{ inputs.app_path }}\build\windows\msix\*.msix
          if-no-files-found: warn


      ############################################################
      # 9. Write to version log
      ############################################################
      - name: Write to version log
        uses: ./.github/actions/write-to-version-log
        with:
          path_to_file: ${{ inputs.version_log_file }}
          key_to_update: ${{ inputs.msix_app_version_key }}
          new_value: ${{ inputs.app_version_full }}
          branch: ${{ inputs.branch }}