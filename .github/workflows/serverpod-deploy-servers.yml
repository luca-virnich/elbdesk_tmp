name: Deploy Serverpod server

on:
  workflow_call:
    inputs:
      REGISTRY:
        required: true
        type: string
      # IMAGE_NAME:
      #   required: true
      #   type: string
      GHCR_ORG:
        required: true
        type: string
      OWNER:
        required: true
        type: string
      SERVERPOD_SERVER:
        required: true
        type: string
      SHOULD_RUN_JOB:
        required: true
        type: boolean
    secrets:
      EMAIL:
        required: true
      DATABASE_PASSWORD:
        required: true
      SERVERPOD_PASSWORDS:
        required: true
      SSH_PRIVATE_KEY:
        required: true
      SSH_HOST:
        required: true
      SSH_USER:
        required: true
      APP_ID:
        required: true
      APP_PRIVATE_KEY:
        required: true

jobs:
  deploy-server:
    if: inputs.SHOULD_RUN_JOB
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install ssh keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if Traefik container is running
        id: check-traefik
        run: |
          if docker ps --filter "name=traefik" --filter "status=running" | grep -q "traefik"; then 
            echo "Traefik is running"
            echo "continue-deployment=false" >> $GITHUB_ENV
          else 
            echo "Traefik is not running"
            echo "continue-deployment=true" >> $GITHUB_ENV
          fi
        env:
          DOCKER_HOST: "ssh://${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}"

      - name: Run docker-compose-proxy if Traefik is not running
        if: env.continue-deployment == 'true'
        run: |
          docker compose -f ./servers/elbdesk_server/docker-compose-proxy.yaml pull
          docker compose -f ./servers/elbdesk_server/docker-compose-proxy.yaml up -d
        env:
          DOCKER_HOST: "ssh://${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}"
          EMAIL: ${{ secrets.EMAIL }}

      - name: Run docker-compose for ${{ fromJson(inputs.SERVERPOD_SERVER).RUN_MODE }}  
        run: |
          docker compose -p ${{ fromJson(inputs.SERVERPOD_SERVER).RUN_MODE }} -f ./${{ fromJson(inputs.SERVERPOD_SERVER).PATH }}/docker-compose-serverpod.yaml pull
          docker compose -p ${{ fromJson(inputs.SERVERPOD_SERVER).RUN_MODE }} -f ./${{ fromJson(inputs.SERVERPOD_SERVER).PATH }}/docker-compose-serverpod.yaml up -d
        env:
          DOCKER_HOST: "ssh://${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}"
          EMAIL: ${{ secrets.EMAIL }}
          GHCR_ORG: ${{ inputs.GHCR_ORG }}
          SERVER_NAME: ${{ fromJson(inputs.SERVERPOD_SERVER).NAME }}
          ENV_NAME: ${{ fromJson(inputs.SERVERPOD_SERVER).RUN_MODE }}
          API_HOST: ${{ fromJson(inputs.SERVERPOD_SERVER).API_HOST }}
          INSIGHTS_HOST: ${{ fromJson(inputs.SERVERPOD_SERVER).INSIGHTS_HOST }}
          WEB_HOST: ${{ fromJson(inputs.SERVERPOD_SERVER).WEB_HOST }}
          DATABASE_HOST: ${{ fromJson(inputs.SERVERPOD_SERVER).DATABASE_HOST }}
          REDIS_HOST: ${{ fromJson(inputs.SERVERPOD_SERVER).REDIS_HOST }}
          DATABASE_NAME: ${{ fromJson(inputs.SERVERPOD_SERVER).DATABASE_NAME }}
          DATABASE_USER: ${{ fromJson(inputs.SERVERPOD_SERVER).DATABASE_USER }}
          DATABASE_PORT: ${{ fromJson(inputs.SERVERPOD_SERVER).DATABASE_PORT }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}

      - name: cleanup
        run: rm -rf ~/.ssh