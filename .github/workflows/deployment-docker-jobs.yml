name: Deploy Jobs

on:
  workflow_call:
    inputs:
      REGISTRY:
        required: true
        type: string
      GHCR_ORG:
        required: true
        type: string
      OWNER:
        required: true
        type: string
      SERVERPOD_SERVERS:
        required: true
        type: string
      IMAGE_NAME:
        required: true
        type: string
      FLUTTER_APPS:
        required: true
        type: string
      FORCE_MIGRATION:
        required: true
        type: boolean
        default: false
      WEB_APP_VERSION:
        description: 'Version for the web app build (semver format: X.Y.Z[+build])'
        required: true
        default: '1.0.0'
        type: string
    secrets:
      EMAIL:
        required: true
      DATABASE_PASSWORD:
        required: true
      SERVERPOD_PASSWORDS:
        required: true
      SSH_PRIVATE_KEY:
        required: true
      SSH_HOST:
        required: true
      SSH_USER:
        required: true
      APP_ID:
        required: true
      APP_PRIVATE_KEY:
        required: true

jobs:
  
  # Creates database migrations for each Serverpod server defined in SERVERPOD_SERVERS.
  # This job runs the migration creation process in parallel for each server using a matrix strategy.
  # The migrations are created before building and pushing the server images to ensure database compatibility.
  create-serverpod-migrations:
    strategy:
      matrix:
        server: ${{ fromJson(inputs.SERVERPOD_SERVERS) }}
    uses: ./.github/workflows/serverpod-create-migrations.yml
    with:
      # SHOULD_RUN_JOB: "${{ github.event.pull_request.changed_files > 0 && contains(github.event.pull_request.files.*.filename, toJson(matrix.server).PATH ) }}"
      SHOULD_RUN_JOB: true
      REGISTRY: ${{ inputs.REGISTRY }}
      GHCR_ORG: ${{ inputs.GHCR_ORG }}
      OWNER: ${{ inputs.OWNER }}
      SERVERPOD_SERVER: '${{ toJson(matrix.server) }}'
      FORCE_MIGRATION: ${{ inputs.FORCE_MIGRATION }}
    secrets:
      EMAIL: ${{ secrets.EMAIL }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      SERVERPOD_PASSWORDS: ${{ secrets.SERVERPOD_PASSWORDS }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      APP_ID: ${{ secrets.APP_ID }}
      APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}

  # Builds and pushes Docker images for each Serverpod server defined in SERVERPOD_SERVERS.
  # This job runs after database migrations are created and uses a matrix strategy to process
  # multiple servers in parallel. Each server's image is built according to its configuration
  # and pushed to the GitHub Container Registry with appropriate tags and labels.
  build-and-push-serverpod-server-images:
    needs: create-serverpod-migrations
    strategy:
      matrix:
        server: ${{ fromJson(inputs.SERVERPOD_SERVERS) }}
    uses: ./.github/workflows/serverpod-build-and-push-image.yml
    with:
      # SHOULD_RUN_JOB: "${{ github.event.pull_request.changed_files > 0 && contains(github.event.pull_request.files.*.filename, toJson(matrix.server).PATH ) }}"
      SHOULD_RUN_JOB: true
      REGISTRY: ${{ inputs.REGISTRY }}
      GHCR_ORG: ${{ inputs.GHCR_ORG }}
      OWNER: ${{ inputs.OWNER }}
      SERVERPOD_SERVER: '${{ toJson(matrix.server) }}'
      IMAGE_NAME: ${{ inputs.IMAGE_NAME }}
    secrets:
      EMAIL: ${{ secrets.EMAIL }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      SERVERPOD_PASSWORDS: ${{ secrets.SERVERPOD_PASSWORDS }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      APP_ID: ${{ secrets.APP_ID }}
      APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}

  # Builds and pushes Docker images for each Flutter app defined in FLUTTER_APPS.
  # This job runs after the serverpod server images are built and uses a matrix strategy
  # to process multiple apps in parallel. Each app's image is built according to its configuration
  # and pushed to the GitHub Container Registry with appropriate tags and labels.
  build-and-push-app-images:
    strategy:
      matrix:
        flutter_app: ${{ fromJson(inputs.FLUTTER_APPS) }}
    uses: ./.github/workflows/flutter-app-build-and-push-image.yml
    with:
      # SHOULD_RUN_JOB: "${{ github.event.pull_request.changed_files > 0 && contains(github.event.pull_request.files.*.filename, toJson(matrix.flutter_app).PATH) && contains(github.event.pull_request.files.*.filename, toJson(matrix.flutter_app).PACKAGES_PATH) && contains(github.event.pull_request.files.*.filename, toJson(matrix.flutter_app).SERVERPOD_CLIENT_PATH) }}"
      SHOULD_RUN_JOB: true
      REGISTRY: ${{ inputs.REGISTRY }}
      GHCR_ORG: ${{ inputs.GHCR_ORG }}
      OWNER: ${{ inputs.OWNER }}
      FLUTTER_APP: '${{ toJson(matrix.flutter_app) }}'
      IMAGE_NAME: ${{ inputs.IMAGE_NAME }}
      WEB_APP_VERSION: ${{ inputs.WEB_APP_VERSION }}
    secrets:
      EMAIL: ${{ secrets.EMAIL }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      SERVERPOD_PASSWORDS: ${{ secrets.SERVERPOD_PASSWORDS }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      APP_ID: ${{ secrets.APP_ID }}
      APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}

  # Deploys Serverpod server instances to the target environment.
  # This job runs after the server images are built and uses a matrix strategy
  # to deploy multiple server instances in parallel. Each server is deployed
  # according to its configuration using Docker Compose, with appropriate
  # environment variables and secrets passed through.
  deploy-serverpod-servers:
    needs: build-and-push-serverpod-server-images
    strategy:
      matrix:
        server: ${{ fromJson(inputs.SERVERPOD_SERVERS) }}
    uses: ./.github/workflows/serverpod-deploy-servers.yml
    name: Deploy to ${{ github.ref_name }}
    with:
      # SHOULD_RUN_JOB: "${{ github.event.pull_request.changed_files > 0 && contains(github.event.pull_request.files.*.filename, toJson(matrix.server).PATH ) }}"
      SHOULD_RUN_JOB: true
      REGISTRY: ${{ inputs.REGISTRY }}
      GHCR_ORG: ${{ inputs.GHCR_ORG }}
      OWNER: ${{ inputs.OWNER }}
      SERVERPOD_SERVER: '${{ toJson(matrix.server) }}'
    secrets:
      EMAIL: ${{ secrets.EMAIL }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      SERVERPOD_PASSWORDS: ${{ secrets.SERVERPOD_PASSWORDS }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      APP_ID: ${{ secrets.APP_ID }}
      APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}

  # Deploys Flutter web applications to the target environment.
  # This job runs after the Serverpod servers are deployed and uses a matrix strategy
  # to deploy multiple Flutter web apps in parallel. Each app is deployed using
  # Docker Compose with the necessary environment variables and secrets.
  # The deployment includes setting up SSL certificates through Traefik and
  # configuring the web server for each app instance.
  deploy-flutter-apps:
    needs: deploy-serverpod-servers
    strategy:
      matrix:
        flutter_app: ${{ fromJson(inputs.FLUTTER_APPS) }}
    uses: ./.github/workflows/flutter-app-deploy-app.yml
    name: Deploy to ${{ github.ref_name }}
    with:
      # SHOULD_RUN_JOB: "${{ github.event.pull_request.changed_files > 0 && contains(github.event.pull_request.files.*.filename, toJson(matrix.flutter_app).PATH) && contains(github.event.pull_request.files.*.filename, toJson(matrix.flutter_app).PACKAGES_PATH) && contains(github.event.pull_request.files.*.filename, toJson(matrix.flutter_app).SERVERPOD_CLIENT_PATH) }}"
      SHOULD_RUN_JOB: true
      REGISTRY: ${{ inputs.REGISTRY }}
      GHCR_ORG: ${{ inputs.GHCR_ORG }}
      OWNER: ${{ inputs.OWNER }}
      FLUTTER_APP: '${{ toJson(matrix.flutter_app) }}'
    secrets:
      EMAIL: ${{ secrets.EMAIL }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      APP_ID: ${{ secrets.APP_ID }}
      APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}
