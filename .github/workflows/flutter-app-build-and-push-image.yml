name: Build and push Flutter app Docker image

on:
  workflow_call:
    inputs:
      REGISTRY:
        required: true
        type: string
      IMAGE_NAME:
        required: true
        type: string
      GHCR_ORG:
        required: true
        type: string
      OWNER:
        required: true
        type: string
      FLUTTER_APP:
        required: true
        type: string
      SHOULD_RUN_JOB:
        required: true
        type: boolean
      WEB_APP_VERSION:
        description: 'Version for the web app build (semver format: X.Y.Z[+build])'
        required: true
        default: '1.0.0'
        type: string
    secrets:
      EMAIL:
        required: true
      DATABASE_PASSWORD:
        required: true
      SERVERPOD_PASSWORDS:
        required: true
      SSH_PRIVATE_KEY:
        required: true
      SSH_HOST:
        required: true
      SSH_USER:
        required: true
      APP_ID:
        required: true
      APP_PRIVATE_KEY:
        required: true

jobs:
  build-and-push-image:
    if: inputs.SHOULD_RUN_JOB
    name: Build and push Flutter app Docker image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    defaults:
      run:
        working-directory: ${{ fromJson(inputs.FLUTTER_APP).PATH }}
    steps:
      - name: Get token from Github App
        uses: actions/create-github-app-token@v1
        id: app_token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          # owner is required, otherwise the creds will fail the checkout step
          owner: ${{ inputs.OWNER }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.REGISTRY }}/${{ inputs.IMAGE_NAME }}

      - name: Check if flutter:${{ fromJson(inputs.FLUTTER_APP).FLUTTER_VERSION }} image exists
        id: check_flutter_image
        run: |
          if docker manifest inspect ghcr.io/${{ inputs.GHCR_ORG }}/flutter:${{ fromJson(inputs.FLUTTER_APP).FLUTTER_VERSION }} >/dev/null 2>&1; then
            echo "Flutter image exists"
            echo "build_flutter=false" >> $GITHUB_OUTPUT
          else
            echo "Flutter image does not exist"
            echo "build_flutter=true" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push flutter:${{ fromJson(inputs.FLUTTER_APP).FLUTTER_VERSION }} image if it does not exist
        if: steps.check_flutter_image.outputs.build_flutter == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./.docker/flutter.Dockerfile
          push: true
          tags: ghcr.io/${{ inputs.GHCR_ORG }}/flutter:${{ fromJson(inputs.FLUTTER_APP).FLUTTER_VERSION }}
          platforms: linux/amd64
          build-args: |
            FLUTTER_VERSION=${{ fromJson(inputs.FLUTTER_APP).FLUTTER_VERSION }}

      - name: Set run mode based on branch
        id: set_mode
        shell: bash
        run: |
          branch="${{ github.ref_name }}"
          case "$branch" in
            "dev")
              run_mode="development"
              ;;
            "test")
              run_mode="test"
              ;;
            "staging")
              run_mode="staging"
              ;;
            "production")
              run_mode="production"
              ;;
            *)
              run_mode="development"  # Default fallback
              ;;
          esac
          echo "Running in $run_mode mode for branch $branch"
          echo "run_mode=$run_mode" >> $GITHUB_OUTPUT

      - name: Set versions
        id: set_versions
        shell: bash
        run: |
          # Parse semver with build metadata (but ignore any pre-release as we'll set it from runMode)
          semver="${{ inputs.WEB_APP_VERSION }}"
          run_mode="${{ steps.set_mode.outputs.run_mode }}"
          
          # Match semver pattern (ignoring any existing pre-release)
          if [[ $semver =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)(-[^+]*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$ ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            patch="${BASH_REMATCH[3]}"
            buildmeta="${BASH_REMATCH[5]}"
            
            # Windows version needs a fourth number and can't have pre-release/build info
            windows_version="${major}.${minor}.${patch}.0"
            
            # Construct full semver with runMode as pre-release (except for production)
            full_semver="${major}.${minor}.${patch}"
            if [ "$run_mode" != "production" ]; then
              full_semver+="-${run_mode}"
            fi
            if [ -n "$buildmeta" ]; then
              full_semver+="${buildmeta}"  # buildmeta already includes the + sign
            fi
            
            # Tag name for GitHub release
            tag_name="v${full_semver}"

            echo "semver=${full_semver}" >> $GITHUB_OUTPUT
            echo "windows_version=${windows_version}" >> $GITHUB_OUTPUT
            echo "tag_name=${tag_name}" >> $GITHUB_OUTPUT
            echo "major=${major}" >> $GITHUB_OUTPUT
            echo "minor=${minor}" >> $GITHUB_OUTPUT
            echo "patch=${patch}" >> $GITHUB_OUTPUT
            echo "buildmeta=${buildmeta}" >> $GITHUB_OUTPUT
            
            echo "Input version: ${{ inputs.WEB_APP_VERSION }}"
            echo "Full semver: ${full_semver}"
            echo "Windows version: ${windows_version}"
            echo "Tag name: ${tag_name}"
            echo "Major: ${major}"
            echo "Minor: ${minor}"
            echo "Patch: ${patch}"
            echo "Buildmeta: ${buildmeta}"
          else
            echo "Invalid version format. Please use X.Y.Z[+build] format (e.g., 1.2.3 or 1.2.3+build.123)" >&2
            exit 1
          fi

      - name: Build and push flutter wasm/web app Docker image
        uses: docker/build-push-action@v5
        with:
          build-args: |
            GITHUB_TOKEN=${{ steps.app_token.outputs.token }}
            GITHUB_USER=${{ github.actor }}
            RUN_MODE=${{ fromJson(inputs.FLUTTER_APP).RUN_MODE }}
            API_HOST=${{ fromJson(inputs.FLUTTER_APP).API_HOST }}
            FLUTTER_VERSION=${{ fromJson(inputs.FLUTTER_APP).FLUTTER_VERSION }}
            WEB_APP_VERSION=${{ steps.set_versions.outputs.semver }}
          context: .
          file: ./${{ fromJson(inputs.FLUTTER_APP).PATH }}/Dockerfile
          push: true
          tags: ghcr.io/${{ inputs.GHCR_ORG }}/${{ fromJson(inputs.FLUTTER_APP).NAME }}_${{ fromJson(inputs.FLUTTER_APP).RUN_MODE }}:latest
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/arm64/v8